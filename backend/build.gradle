import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'java'
    id "eclipse"
    id "org.xtext.builder" version "${xtextBuilderVersion}"
}

group = 'org.contextmapper'
version = '1.0.0'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven {
        url = uri("https://repo.spring.io/milestone")
    }

    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

dependencies {
    xtextLanguages "org.contextmapper:context-mapper-dsl:${cmlVersion}"

    implementation "org.contextmapper:context-mapper-dsl:${cmlVersion}"
    implementation "org.eclipse.xtend:org.eclipse.xtend.lib:${xtendLibVersion}"

    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation "org.springframework.boot:spring-boot-configuration-processor"
    implementation "org.springdoc:springdoc-openapi-ui:${springDocsVersion}"
    implementation "com.google.inject:guice:${googleGuiceVersion}"

    runtimeOnly "org.springframework.boot:spring-boot-devtools"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "io.projectreactor:reactor-test"
    testImplementation "com.jayway.jsonpath:json-path:${jsonPathVersion}"
    testImplementation "org.hamcrest:hamcrest:${hamcrestVersion}"
}

xtext {
    languages {
        cml {
            fileExtension = "cml"
            setup = "org.contextmapper.dsl.ContextMappingDSLStandaloneSetup"
            generator.outlet.producesJava = true
        }
    }

    sourceSets {
        main {
            srcDir "src/main/cml"
        }
    }
}

bootJar {
    destinationDirectory = file(project.buildDir)
}

test {
    useJUnitPlatform()
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
